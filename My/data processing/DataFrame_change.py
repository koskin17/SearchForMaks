# Изменение данных в DataFrame, если, к примеру, данные пришли в неверном виде

import pandas as pd
data = pd.read_csv("https://video.ittensive.com/python-advanced/internet-2018.raw.csv",
                   na_values="NA", names=["Регион", "int", "frac"], skiprows=1, index_col="Регион")
print(data.head())
# В данных есть целая часть и дробная часть и они разделены запятой.
# Их нужно разделить.
# Будем использовать lambda-функцию
# В данном случае мы применяем ко всей серии данных frac некоторую lambda-функцию, которая
# делит на 100.
# В этом случае не надо делать функцию отдельно, не надо циклом перебирать.
# Lambda-функция применится ко всей серии, к каждому значению.
data["frac"] = data["frac"].apply(lambda n: n/100)
# Смотрим на данные после изменения0
print("В результате дробная часть (столбец frac) поделилась на 100.")
print(data.head())
# Если мы хотим изменить индекс, а не данные, то применяется не метод apply, а функция map
# Это отличие между изменением данных и изменением индекса
print()
print("Получаем очищенные данные:")
data["За 2018 год"] = data["int"] + data["frac"]
print(data.head())
# Теперь из DataFrame можно удалить ненужные столбцы.
# Удалить можно и строки, и столбцы.
# Строки можно удалить, как через фильтрацию, так и через метод drop
# Столбцы также можно удалить фильтрацией и методом drop, но при методе drop надо указывать
# параметр axis=1
data = data.drop(labels=["int", "frac"], axis=1)
print()
print("Данные без ненужных столбцов:")
print(data.head())
# Можно пойти другим, более сложным путем.
# 1. Пересобрать данные, сначала отбросив индекс, т.е. data.reset_index(), чем включаем индекс
# в данные.
# Потом собрать новый DataFrame, используя словарь и сказав, что теперь
# "Регион" - это серия данных по региону и что в новый DataFrame должны войти данные
# за 2018 год
# data = pd.DataFrame({"Регион": data["Регион"], "2018": data["2018"]})
# В результате соберется новый DataFrame, но для него придётся назначить новый индекс
# Т.е. серия данных "Регион" переползает из серии данных в индекс данных
# data = data.set_index("Регион")

# Данные можно объединять и разделять данные не только по столбцам, но и по строкам.
# Допустим у нас есть нулевые значения и мы их сразу заполняем нулями
data_null = data[data["За 2018 год"].isnull()].fillna(0, axis=1)
# Отбираем регионы с проникновением интернета меньше 5
data_less5 = data[data["За 2018 год"] < 5]
# Теперь можно сделать новый DataFrame, в котором данные 0 или меньше 5
# У данным с нулями добавляем через метод append данные меньше 5
# data_null_less5 = data_null.append(data_less5)
data_null_less5 = pd.concat([data_less5, data_less5])
print()
print("Данные с пропуском интернета 0 или меньше 5:")
print(data_null_less5)
