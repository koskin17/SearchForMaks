# Очистка и фильтрация данных
import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv("https://video.ittensive.com/python-advanced/data-5283-2019-10-04.utf.csv",
                   delimiter=";", na_values="NA")
# Очищаем данные от NaN
data.fillna(0, axis=1, inplace=True)
# Смотрим на данные
print(data.head())
# Группировка данных по месяцам с приведением месяца к категории и у группы данных по месяцам выводим среднее значение
print()
print("Группировка по месяцам с приведением месяца к категории")
data["Month"] = data["Month"].str.upper().str.slice(0, 3).astype("category")
data_group = data.groupby("Month").mean()

print(data_group)
# Данных больше, чем 12 из-за того, что месяца написаны с опечатками
# Для преобразования данных в строке 14 указывается метод str для того, чтобы оперировать со значениями, как со строками
# Также прописывается метод upper() для приведения всех значений к верхнему регистру
# Дальше берутся первые три буквы - распространённая практика обозначения месяцев
# Вместо того, чтобы преобразовывать данные в строке 14 можно отфильтровать лишние значения.
# Определяются они по частоте, т.е. определяются редкие значения - если месяц встречается 1 или 2 раза,
# то с этим месяцем что-то не так.
# Фильтруются такие данные подсчетом кол-ва строк и это кол-во должны больше 1
# data = data.groupby("Month").filter(lambda x: x["Calls"].count() > 1)
# Применяется группировка к данным по месяцу и затем к групповому фрейму,
# к группе данных применяется фильтр с лямбда-функцией, в которую передаём значение группы и смотрим / считаем кол-во
# записей в группе. Если записей больше 1, то мы эту группу оставляем.
# Т.е. возвращается True или False и группы, для которых False, будут отброшены
# Наносим средние значения на график.
# Для этого берём определённую серию данных из группы и эту серию наносим на график - столбчатую диаграмму
# Для дальнейшей работы с данными можно отсортировать наши значения сгруппированных данных методом sort.values()
data_group = data_group.sort_values("Calls", ascending=True)
data_group["Calls"].plot.bar()
plt.show()
