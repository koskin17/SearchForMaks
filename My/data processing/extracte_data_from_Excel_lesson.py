# Для открытия файлов Excel нужен модуль openpyxl
import pandas as pd

"""Метод parse, который прописан в строке 14, можно вызвать сразу в методе чтения файла.
Это удобно делать, как обрабатывается единственный лист в файле. Если же листов нужно парсить несколько,
то нужно создать переменную с файлом Excel и потом уже каждый раз парсить конкретный лист.
Также можно сразу переименовать столбцы в нужные имена.
Также сразу можно преобразовывать или конвертировать данные при помощи параметра converters,
который используется и в loadtxt и в других.
В нём указывается, каким образом мы хотим преобразовать данные в наших сериях.
Мы указываем, что данные серии Date нам нужны именно как datetime.
Для DOM time и Load time указывается целочисленный тип"""

data = pd.ExcelFile("https://video.ittensive.com/python-advanced/website.load.timings.xlsx").parse(
    sheet_name=0, names=["Date", "DOM time", "Load time"],
    converters={"Date": pd.to_datetime, "DOM time": int, "Load time": int})

# Сразу можно посмотреть названия листов
# print(data.sheet_names)
# Для получения данных файл Excel нужно распарсить методом parse, указав имя листа, который мы хотим
# загрузить в DataFrame, либо его индекс по порядку, начиная с нуля
# data = data.parse(sheet_name=0)
# После этого уже можно вывести сами данные

print(data.head())

"""Отдельные колонки DataFrame или отдельные серии данных могут быть вызваны по названию колонки"""

print("Вывод данных из конкретной колонки / конкретная серия данных Date:")
print(data["Date"])
"""После преобразования данных DOM time и Load time в целочисленный тип уже можно их обрабатывать.
Например вывести среднее значение"""
print()
print("Вывод среднего значение по серии данных DOM time:")
print(data["DOM time"].mean())
print()
print("Также можно вывести средние значения для всех полей, для которых это среднее можно посчитать:")
print(data.mean())
