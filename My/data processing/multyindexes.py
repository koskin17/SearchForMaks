# Иерархические или множественные индексы.
# В исходном наборе данных не было информации об агрегированных данных.
# Его можно добавить, как атрибут в данных в качестве дополнительного индекса.
import pandas as pd
data = pd.read_csv("https://video.ittensive.com/python-advanced/internet-2017.csv",
                   na_values="NA", decimal=",", skiprows=1, names=["Регион", "2017"])
"""Пробуем найти все номера строк, которые содержат "округ" в названиях регионов.
Мы создаём новый DataFrame из серии данных "Регион", в значениях которых есть "округ"
при помощи метода str.contains.
Т.е. мы ищем все строки в серии Регион, которые содержат "округ" и берём их индекс, т.е. индекс
загрузке данных в DataFrame мы не переопределяли - мы делаем определенную фильтрацию.
"""
area_indexes = data[data["Регион"].str.contains("округ")].index
"""В результате мы получаем список индексов или номеров строк, которые содержат "округ" в регионе"""
print(area_indexes)
"""Теперь создаём индекс из этих номеров строк с помощью лямбда-функции"""
data_areas_index = [(lambda n: "AREA" if n in area_indexes else "REGION")(i) for i in range(0, len(data.index))]
print(data_areas_index)
"""Теперь в DataFrame мы можем добавить еще одну серию и сказать, что индекс наших зон"""
data["Тип"] = data_areas_index
"""После этого назначается уже мультииндекс.
Т.е. все предыдущие шаги были для того, чтобы в наш массив данных добавить множественный индекс,
состоящий из нескольких строк"""
data = data.set_index(["Тип", "Регион"])
print(data)
"""Также дополнительный или мультииндекс может быть использован для сортировки.
Теперь отсортируем данные по индексу"""
data = data.sort_index()
print(data)
"""также индексы позвляют получать срезы данных.
Для этого используется метод loc"""
areas = data.loc["AREA"]
print(areas)
