# Моносостояние всех экземпляров класса

class Cat:
    # breed = 'pers'
    # В этом случае все экземпляры класса получает одинаковый атрибут.
    # Если нужно, чтобы при изменении одного атрибута это затрагивало все экземпляры класса, то
    # создаётся прайвед-переменная

    __shared_attr = {
        'breed': 'pers',
        'color': 'black'

    }

    # И теперь при каждой инициализации объекта методом __init__ мы подменяем нашему экземпляру
    # каждую переменную __dict__ на значение из аттрибута класса __shared_attr

    def __init__(self):
        self.__dict__ = Cat.__shared_attr


a = Cat()
print(a.breed)
b = Cat()
print(b.breed)
a.breed = 'siam'
print(a.breed)

b.color = 'black'
print(b.color)

# Создаём кошек
c = Cat()
d = Cat()
print(c.__dict__, d.__dict__)
# Меняем цвет
c.color = 'white'

# И теперь цвет меняется у всех экземпляров класса
print(c.__dict__, d.__dict__)

# Также можно создать новый атрибут
d.name = 'Bob'
# И у всех экземпляров класса появляется аттрибут со значением
print(c.__dict__, d.__dict__)

# Создаём новую кошку и у неё есть все аттрибуты и значения
h = Cat()
print("Аттрибуты кошки H:", h.__dict__)

# Такой результат получается использованием аттрибута класса __shared_attr со значением словарь
# Словарь - это изменяемый объект и у каждого экземпляра класса в качестве переменной __dict__
# хранится ссылка на один и тот же словарь.
# Аттрибут __shared_attr в данном случае защищённый - начинается с двух подчёркиваний.
