# Публичные, приватные и защищенные аттрибуты класса

class BankAccount:
    def __init__(self, name, balance, passport):
        # Одно нижнее подчеркивание делает аттрибут защищённым, т.е. просто указывает, что данный
        # аттрибут не использовать вне класса, а только внутри класса.
        # Два нижних подчёркивания делают аттрибуты защищёнными.

        self.__name = name
        self.__balance = balance
        self.__passport = passport

    # Помимо скрытия аттрибутов, скрытым может быть и метод.
    # Для этого перед именем метода ставятся нижние подчёркивания.
    # В этом случае метод будет доступен для использования только внутри класса
    def __print_protected_attr_2(self):
        print(self.__name, self.__balance, self.__passport)

    # Но можно сделать публичный метод внутри класса, который будет вызывать скрытый метод
    def print_public(self):
        self.__print_protected_attr_2()


account1 = BankAccount('Bob', 100000, 456123)

# При двух подчёркиваниях аттрибуты нельзя даже распечатать.
# print(account1.__name)

# При этом в классе можно создать метод, который будет выводить аттрибуты на печать
account1.print_public()

# К защищенным аттрибутам можно получить доступ через полное имя
# Для получения полных имён аттрибутов используется метод dir
print(dir(account1))
# Из кортежа можно взять полное имя аттрибута и уже его использовать
print('Значение защищённого аттрибута "Баланс":', account1._BankAccount__balance)

# Отдельно в Python есть модуль accessify, в котором есть два декоратора: protected и privat.
# Их можно использовать