# Method Resolution Order (MRO) - порядок разрешения методов,
# т.е. в каком порядке методы будут вызваны и какой метод главнее

#         class A
#         /   \
# class B      class C
#         \   /
#         class D
#
# Классы B и С унаследованы от класса А
# Класс D унаследован от классов В и С

class A:
    def some_method(self):
        print("Method of class A")


class B(A):
    def some_method(self):
        print("Method of class B")


class C(A):
    """
    Для информации.
    Если в методе не используется и не передаётся никакой уникальный атрибут, то этот метод называется статисным или
    методов класса. В этом случае можно создавать методы уровня класса и перед нин можно указать
    декоратор @classmethod, а в параметрах метода вместо self
    указать cls
    """
    @classmethod
    def some_method(cls):
        print("Method of class C")


class D(B, C):
    # def some_method(self):
    #     print("Method of class D")
    pass


some_object = D()
some_object.some_method()
# В этом случае вызовится метод класса D

# Если же в классе нет метода, который вызывается, то, чтобы не гадать какой метод будет вызван, в Python есть
# специальные методы проверки.
# 1. Атрибут __mro__ - это атрибут, который есть у каждого класса.
# 2. Метод mro(), который есть у каждого класса.
# 3. Функция help() для конкретного класса
print(D.__mro__)
print(D.__mro__)
help(D)     # в этом случае выводится исчерпывающая информация про объект и его наследование
