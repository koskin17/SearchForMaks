# Разбор методов класса classmethod и статических методов staticmethod

class Example:
    def hello1():
        print("Hello!")

    def hello2(self):
        print("Hello!")

    # Для того, чтобы функция могла вызываться и от класса, и от instance (экземпляра класа), нужно создать
    # статик метод staticmethod. В это случае он не привязывается ни к классу, ни к экземпляру.
    # Отдельная польза от static-методов - когда нужна функцию, но нужно её реализовать внутри класса,
    # а не выносить за класс
    # Для этого на неё вешается декоратор @staticmethod
    @staticmethod
    def hello3():
        print("Static Hello!")

    # Для создания class-метода нужно повесить декоратор @classmethod.
    # И первым параметром такой метод принимает именно Класс в виде cls
    @classmethod
    def hello4(cls):
        print(f"Class method {cls}")


# Если создать обычную функцию в классе, то её можно вызывать от класса Example.hello()
a1 = Example()
Example.hello1()
# Но нельзя вызывать от экземпляра класса a.hello()
# a1.hello1()

# Если же в качестве параметра установить self, то функция будет вызываться от объекта класса
a2 = Example()
a2.hello2()

# Но не будет вызываться от класса потому что она не привязана к классу.
# Example.hello2()

# При определении метода как static, функцию можно вызвать и от класса, и от экземпляра
Example.hello3()
a3 = Example()
a3.hello3()

Example.hello4()
a4 = Example()
a4.hello4()
