##'''
##Способы создания множества
##'''
##t = {'a', 'f', 1,1,1,1,11,1,2,3,25,(2,5)}
##y = set()
##
##
##'''
##Создадим функция, которая отсеивает все повторяющиеся элементы из списка
##'''
##'''
##Импортируем модуль time для засекания времени выполнения функции
##'''
##import time
##
##def f(*args):
##    list_new = []
##    for i in args:
##        for y in i:
##            if y not in list_new:
##                list_new.append(y)
##    return list_new
##
##z = list(range(1000))
##x = list(range(5000, 15000))
##c = list(range(10000, 20000))
##
##start = time.time()
##f(z, x, c)
##stop = time.time() - start
##print('Время выполнения операций при помощи функции: 'stop)
##
##'''
##Теперь сделаем все тоже самое, что и в функции выше, но только при помощи множества
##'''
##
##start2 = time.time()
##'''
##При помощи встроенной фунции set делаем из списка множество
##'''
##r = set(z)
##'''
##Нужна еще одна переменная, в которой при помощи функции union
##будет объединять наши множества. Их можно передавать несколько
##'''
##t = r.union(set(x), set(c))
##stop2 = time.time() - start2
##print('Время выполнения операций при помощи множества: ', stop2)
##print('\n \n \n \n')
'''
first = {1, 2, 3, 4, 5, 6}
second = {4, 5, 6, 7, 8, 9}

print(first | second) - оператор | комбинирует 2 множества в новое, исключая повторяющиеся элементы
print(first & second) - оператор & выводит элементы, присутствующие в обоих множествах
print(first - second) - оператор "-" - выводит элементы, отсутствующие во втором множестве
print(second - first) - аналогично выводятся элементы, отсутствующие в первом множестве
print(first ^ second) - оператор ^ выводит элементы двух множеств, исключая повторяющиеся
'''

'''
Методы работы со множествами
'''
z = {1,2,3,4,5}
print('Множество Z:', z)
x = {3,4,5,6,7}
print('Множество X:', x)
print('')
z.add(6)        # функция добавления элемента в множество
z.add(7)
z.add(8)
z.add(9)
z.add(10)
print('Добавление 6 во множество Z:', z)
z.discard(1)    # функция позволяет удалить элемент из множества
                # если элемента во множестве не будет, то ошибка не возникает
                # просто никаких действий
print('Удаление первого элемента из множество Z:', z)
z.remove(2)
print('Еще один способ удаления элемента из множества Z:', z)   # аналогично discart удаляет элемент из множество,
                # но выдаёт ошибку, если элемента нет во множестве
                # ВАЖНО! При удалении индексы элементов не смешаются,
                # т.е. при удалении первого элемента остальные считаются со второго
y = z.union(x)      # позволяет объединить множество с другим,
                    # указанным в качстве прааметра.
                    # при этом повторяющихся элементов в новом множествое не будет
print('Объединение двух множеств Z и X:', y)
z.update(x)     # еще один метод объединения множеств
print('Еще один метод объединения множество Z и X:', z)
t = z.intersection(x)   # метод проверки пересещения / повторения значений множества Z с множеством X
print('Метод проверки пересечения множеств Z и X:')
print('- множество Z сейчас:', z)
print('- множество X сейчас:', x)
print('Общие элементы в них: ', t)
e = z.difference(x) # метод определения разницы между множествами
print('Разница между множествами Z и X, т.е. элементы, которые отсутствуют в множестве X по сравнениею с множеством Z', e)
print('\n')
print('\n')
print('\n')
