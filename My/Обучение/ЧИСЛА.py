"""Смена знака числа"""


def make_negative(number):
    return -abs(number)


''' Округление числе по математическим правилам
Чтобы с помощью функции int() округлить число по математическим правилам,
необходимо добавить к нему 0.5, если оно положительное, и -0.5, если оно отрицательное.
Тогда операция принимает такой вид: int(num + (0.5 if num > 0 else -0.5)).
Чтобы каждый раз не писать условие, удобно сделать отдельную функцию:
Функция работает также, как стандартная функция округление во второй версии Python
(арифметическое округление).
Примеры:
int_r(11.5) # = 12
int_r(11.4) # = 11
int_r(-0.991) # = -1
int_r(1.391) # = 1
'''


def int_r(num):
    num = int(num + (0.5 if num > 0 else -0.5))
    return num


''' Преобразование чисел между система счисления
int([object], [основание системы счисления]) - преобразование к целому числу в десятичной системе счисления.
По умолчанию система счисления десятичная, но можно задать любое основание от 2 до 36 включительно.
bin(x) - преобразование целого числа в двоичную строку.
hex(х) - преобразование целого числа в шестнадцатеричную строку.
oct(х) - преобразование целого числа в восьмеричную строку.
'''

''' Метод isinstance проверяет соответствие типа элемента указанному

isinstance(1, int)  # True
isinstance('some', str)  # True
isinstance(1.7, float)  # True '''

''' Сравнение бинарных числе'''


def interlockable(a, b):
    a = bin(a).lstrip('0b')
    b = bin(b).lstrip('0b')
    if len(a) < len(b):
        a = a.rjust(len(b), ' ')
    else:
        b = b.rjust(len(a), ' ')
    print(a)
    print(type(a))
    print(b)
    for i in range(len(a)):
        print(a[i])
        print(b[i])
        if a[i] == '1' and b[i] == '1':
            return False
    return True


print(interlockable(a, b))

''' Второй вариант
В нём используется бинарны оператор сравнения по каждому биту
'''


def interlockable(a, b):
    return not a & b
